package momo.command;

import momo.Storage;
import momo.TaskList;
import momo.TextUi;
import momo.exceptions.InvalidCommandException;
import momo.exceptions.MomoException;
import momo.task.*;

import java.time.format.DateTimeParseException;

// JavaDoc are generated by ChatGPT

/**
 * Represents a command that adds a new task to the task list.
 */
public class AddCommand extends Command {
    private final String type;
    private final String[] args;

    /**
     * Constructs an {@code AddCommand}.
     *
     * @param type The type of task to add (todo, deadline, event).
     * @param args Arguments required to construct the task.
     */
    public AddCommand(String type, String... args) {
        this.type = type;
        this.args = args;
    }

    /**
     * Executes the AddCommand by creating a new task of the specified type
     * and adding it to the provided {@link TaskList}.
     *
     * <p>If the task is successfully created, the task list is updated and a
     * message is returned via the {@link TextUi} showing the added task.
     *
     * @param storage  The {@link Storage} instance for saving/loading tasks.
     * @param ui       The {@link TextUi} instance used to display messages to the user.
     * @param taskList The current {@link TaskList} where the task will be added.
     * @return A message confirming the task has been added, or an error message
     *         if the task could not be created.
     * @throws MomoException If there is an issue creating the task (e.g., invalid date).
     */
    @Override
    public String execute(Storage storage, TextUi ui, TaskList taskList) throws MomoException {
        try {
            Task newTask = createTask(type);
            taskList.add(newTask);
            return ui.printAddedTask(newTask, taskList.getTasks());

        } catch (MomoException e) {
            return e.getMessage();
        }
    }

    /**
     * Creates a new {@link Task} based on the specified type and arguments.
     *
     * <p>Supported task types:
     * <ul>
     *     <li>"todo" - creates a {@link ToDo} task</li>
     *     <li>"deadline" - creates a {@link Deadline} task with a due date</li>
     *     <li>"event" - creates an {@link Events} task with a start and end date</li>
     * </ul>
     *
     * @param type The type of task to create ("todo", "deadline", "event").
     * @return The newly created {@link Task}.
     * @throws MomoException If the task type is invalid or a date parsing error occurs.
     */
    private Task createTask(String type) throws MomoException {
        try {
            return switch (type) {
                case "todo" -> new ToDo(args[0]);
                case "deadline" -> new Deadline(args[0], args[1]);
                case "event" -> new Events(args[0], args[1], args[2]);
                default -> throw new InvalidCommandException();
            };
        } catch (DateTimeParseException e) {
            throw new MomoException("Invalid date format. Please use \"MM/dd/yyyy\" format.");
        }
    }
}
